{"ast":null,"code":"import _classCallCheck from \"/Users/ben/Desktop/bennyben/fullstack_app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ben/Desktop/bennyben/fullstack_app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ben/Desktop/bennyben/fullstack_app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ben/Desktop/bennyben/fullstack_app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ben/Desktop/bennyben/fullstack_app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/ben/Desktop/bennyben/fullstack_app/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/ben/Desktop/bennyben/fullstack_app/client/src/Square.js\";\nimport React, { Component } from \"react\";\nimport SquareTitle from './SquareTitle';\n\nvar Square =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Square, _Component);\n\n  function Square(props) {\n    var _this;\n\n    _classCallCheck(this, Square);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Square).call(this, props));\n    _this.state = {\n      count: 0,\n      squareTitle: 'THIS IS A COUNTING SQUARE!'\n    };\n    _this.increase = _this.increase.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Square, [{\n    key: \"increase\",\n    value: function increase(e) {\n      this.setState({\n        count: this.state.count + 1\n      });\n    } // -------------------------------------------------------------------------------\n    // ALL LIFECYCLE METHOD EXAMPLES:\n    //========== ON INITIAL RENDER ==========\n    // 1. defaultProps : (called outside scope of component.) : ex. Square.defaultProps = {count: 1}\n    // 2. this.state (called within the constructor)\n    // 3. \n\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {} // console.log(this.state.count)\n    // console.log(this.props.cardClickCount)\n    // 4. render() function is called\n    // 5.\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {} //========== ON STATE CHANGE ==========\n    // 1.\n\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(newProps, newState) {\n      console.log(\"shouldComponentUpdate\");\n      console.log(newProps);\n      console.log(newState);\n\n      if (this.state.count < 5) {\n        return true;\n      } else {\n        return false;\n      }\n    } // 2. \n\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(newProps, newState) {\n      // can't call setState within this function\n      console.log(\"componentWillUpdate\");\n      console.log(newProps);\n      console.log(newState);\n    } // 3. render() function is called\n    // 4.\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      console.log(\"componentDidUpdate\");\n      console.log(prevProps);\n      console.log(prevState);\n    } //========== ON PROPS CHANGE ==========\n    // 1.\n\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {} // console.log(\"componentWillReceiveProps\");\n    // console.log(newProps);\n    // Props can change when a component's parent renders the component again with different properties. I think this is mostly an optimization so that no new component needs to be instantiated. SEE TITLE COMPONENT FOR BETTER EXAMPLE\n    // Rest of props change has same lifecycle method order as 'ON STATE CHANGE'\n    // -------------------------------------------------------------------------------\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var squareStyle = {\n        height: 250,\n        width: 250,\n        padding: 0,\n        backgroundColor: 'red'\n      };\n      return React.createElement(\"div\", {\n        style: squareStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(SquareTitle, {\n        squareTitle: this.state.squareTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, this.props.cardClickCount), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, this.state.count), React.createElement(\"button\", {\n        onClick: this.increase,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Increase Count +\"));\n    }\n  }]);\n\n  return Square;\n}(Component);\n\nexport default Square;","map":{"version":3,"sources":["/Users/ben/Desktop/bennyben/fullstack_app/client/src/Square.js"],"names":["React","Component","SquareTitle","Square","props","state","count","squareTitle","increase","bind","e","setState","newProps","newState","console","log","prevProps","prevState","squareStyle","height","width","padding","backgroundColor","cardClickCount"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,eAAxB;;IAEMC,M;;;;;AACL,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,gFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACZC,MAAAA,KAAK,EAAE,CADK;AAEZC,MAAAA,WAAW,EAAE;AAFD,KAAb;AAKA,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,uDAAhB;AARkB;AASlB;;;;6BAEQC,C,EAAG;AACX,WAAKC,QAAL,CAAc;AACbL,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AADb,OAAd;AAGA,K,CAGA;AAED;AACA;AACA;AACA;AACA;;;;yCACqB,CAGpB,C,CAFA;AACA;AAED;AACA;;;;wCACoB,CACnB,C,CAGD;AACA;;;;0CACsBM,Q,EAAUC,Q,EAAU;AACzCC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,UAAI,KAAKR,KAAL,CAAWC,KAAX,GAAmB,CAAvB,EAA0B;AACzB,eAAO,IAAP;AACA,OAFD,MAEO;AACN,eAAO,KAAP;AACA;AACD,K,CACD;;;;wCACoBM,Q,EAAUC,Q,EAAU;AACvC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,K,CACD;AACA;;;;uCACmBG,S,EAAWC,S,EAAW;AACxCH,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYE,SAAZ;AACA,K,CAID;AACA;;;;8CAC0BL,Q,EAAU,CAInC,C,CAHA;AACA;AACA;AAED;AAUC;;;;6BAKS;AACR,UAAIM,WAAW,GAAG;AACjBC,QAAAA,MAAM,EAAE,GADS;AAEjBC,QAAAA,KAAK,EAAE,GAFU;AAGjBC,QAAAA,OAAO,EAAE,CAHQ;AAIjBC,QAAAA,eAAe,EAAE;AAJA,OAAlB;AAMC,aACC;AAAK,QAAA,KAAK,EAAEJ,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,WAAD;AAAa,QAAA,WAAW,EAAE,KAAKb,KAAL,CAAWE,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKH,KAAL,CAAWmB,cAAf,CAFD,EAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKlB,KAAL,CAAWC,KAAhB,CAHD,EAIC;AAAQ,QAAA,OAAO,EAAE,KAAKE,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAJD,CADD;AAQD;;;;EAtGkBP,S;;AAyGrB,eAAeE,MAAf","sourcesContent":["import React, { Component } from \"react\";\nimport SquareTitle from './SquareTitle';\n\nclass Square extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tcount: 0,\n\t\t\tsquareTitle: 'THIS IS A COUNTING SQUARE!'\n\t\t};\n\n\t\tthis.increase = this.increase.bind(this);\n\t}\n\n\tincrease(e) {\n\t\tthis.setState({\n\t\t\tcount: this.state.count + 1\n\t\t})\n\t}\n\n \n  // -------------------------------------------------------------------------------\n\n\t// ALL LIFECYCLE METHOD EXAMPLES:\n\t//========== ON INITIAL RENDER ==========\n\t// 1. defaultProps : (called outside scope of component.) : ex. Square.defaultProps = {count: 1}\n\t// 2. this.state (called within the constructor)\n\t// 3. \n\tcomponentWillMount() {\n\t\t// console.log(this.state.count)\n\t\t// console.log(this.props.cardClickCount)\n\t}\n\t// 4. render() function is called\n\t// 5.\n\tcomponentDidMount() {\n\t}\n\n\n\t//========== ON STATE CHANGE ==========\n\t// 1.\n\tshouldComponentUpdate(newProps, newState) {\n\t\tconsole.log(\"shouldComponentUpdate\");\n\t\tconsole.log(newProps);\n\t\tconsole.log(newState);\n\t\tif (this.state.count < 5) {\n\t\t\treturn true\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\t// 2. \n\tcomponentWillUpdate(newProps, newState) {\n\t\t// can't call setState within this function\n\t\tconsole.log(\"componentWillUpdate\");\n\t\tconsole.log(newProps);\n\t\tconsole.log(newState);\n\t}\n\t// 3. render() function is called\n\t// 4.\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconsole.log(\"componentDidUpdate\");\n\t\tconsole.log(prevProps);\n\t\tconsole.log(prevState);\n\t}\n\n\n\n\t//========== ON PROPS CHANGE ==========\n\t// 1.\n\tcomponentWillReceiveProps(newProps) {\n\t\t// console.log(\"componentWillReceiveProps\");\n\t\t// console.log(newProps);\n\t\t// Props can change when a component's parent renders the component again with different properties. I think this is mostly an optimization so that no new component needs to be instantiated. SEE TITLE COMPONENT FOR BETTER EXAMPLE\n\t}\n\t// Rest of props change has same lifecycle method order as 'ON STATE CHANGE'\n\n\n\n\n\n\n\n\n\n  // -------------------------------------------------------------------------------\n\n\n\n\n  render() {\n  \tvar squareStyle = {\n  \t\theight: 250,\n  \t\twidth: 250,\n  \t\tpadding: 0,\n  \t\tbackgroundColor: 'red'\n  \t}\n    return (\n    \t<div style={squareStyle}>\n    \t\t<SquareTitle squareTitle={this.state.squareTitle}/>\n    \t\t<p>{this.props.cardClickCount}</p>\n    \t\t<h1>{this.state.count}</h1>\n    \t\t<button onClick={this.increase}>Increase Count +</button>\n    \t</div>\n    );\n  }\n}\n\nexport default Square\t;\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}